"""
Test script cho Nutrition Advisor
Ki·ªÉm tra c√°c ch·ª©c nƒÉng t√≠nh to√°n BMI, BMR, TDEE v√† t∆∞ v·∫•n dinh d∆∞·ª°ng
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.nutrition_advisor import nutrition_advisor
from app.schemas import UserProfile, ActivityLevel, Goal, Gender

def test_bmi_calculation():
    """Test t√≠nh to√°n BMI"""
    print("=== Test t√≠nh to√°n BMI ===")
    
    # Test case 1: Ng∆∞·ªùi b√¨nh th∆∞·ªùng
    height = 170  # cm
    weight = 65   # kg
    bmi = nutrition_advisor.calculate_bmi(weight, height)
    category = nutrition_advisor.get_bmi_category(bmi)
    
    print(f"Chi·ªÅu cao: {height}cm, C√¢n n·∫∑ng: {weight}kg")
    print(f"BMI: {bmi}")
    print(f"Ph√¢n lo·∫°i: {category}")
    print()
    
    # Test case 2: Ng∆∞·ªùi th·ª´a c√¢n
    height = 165
    weight = 80
    bmi = nutrition_advisor.calculate_bmi(weight, height)
    category = nutrition_advisor.get_bmi_category(bmi)
    
    print(f"Chi·ªÅu cao: {height}cm, C√¢n n·∫∑ng: {weight}kg")
    print(f"BMI: {bmi}")
    print(f"Ph√¢n lo·∫°i: {category}")
    print()

def test_bmr_tdee_calculation():
    """Test t√≠nh to√°n BMR v√† TDEE"""
    print("=== Test t√≠nh to√°n BMR v√† TDEE ===")
    
    # Test case: Nam, 25 tu·ªïi, 170cm, 65kg, v·∫≠n ƒë·ªông v·ª´a ph·∫£i
    user_profile = UserProfile(
        height=170,
        weight=65,
        age=25,
        gender=Gender.MALE,
        activity_level=ActivityLevel.MODERATELY_ACTIVE,
        goal=Goal.MAINTAIN_WEIGHT
    )
    
    body_metrics = nutrition_advisor.analyze_user_profile(user_profile)
    
    print(f"Th√¥ng tin ng∆∞·ªùi d√πng:")
    print(f"- Chi·ªÅu cao: {user_profile.height}cm")
    print(f"- C√¢n n·∫∑ng: {user_profile.weight}kg")
    print(f"- Tu·ªïi: {user_profile.age}")
    print(f"- Gi·ªõi t√≠nh: {user_profile.gender.value}")
    print(f"- M·ª©c ƒë·ªô ho·∫°t ƒë·ªông: {user_profile.activity_level.value}")
    print(f"- M·ª•c ti√™u: {user_profile.goal.value}")
    print()
    
    print(f"K·∫øt qu·∫£ ph√¢n t√≠ch:")
    print(f"- BMI: {body_metrics.bmi}")
    print(f"- Ph√¢n lo·∫°i BMI: {body_metrics.bmi_category}")
    print(f"- BMR: {body_metrics.bmr} calories/ng√†y")
    print(f"- TDEE: {body_metrics.tdee} calories/ng√†y")
    print(f"- M·ª•c ti√™u calo: {body_metrics.daily_calories_target} calories/ng√†y")
    print()

def test_daily_nutrition_needs():
    """Test t√≠nh to√°n nhu c·∫ßu dinh d∆∞·ª°ng h√†ng ng√†y"""
    print("=== Test t√≠nh to√°n nhu c·∫ßu dinh d∆∞·ª°ng ===")
    
    # Test c√°c m·ª•c ti√™u kh√°c nhau
    goals = [Goal.LOSE_WEIGHT, Goal.MAINTAIN_WEIGHT, Goal.GAIN_WEIGHT, Goal.BUILD_MUSCLE]
    base_calories = 2000
    
    for goal in goals:
        daily_needs = nutrition_advisor.calculate_daily_nutrition_needs(base_calories, goal)
        
        print(f"M·ª•c ti√™u: {goal.value}")
        print(f"- Calories: {daily_needs.calories}")
        print(f"- Protein: {daily_needs.protein}g")
        print(f"- Carbs: {daily_needs.carbs}g")
        print(f"- Fat: {daily_needs.fat}g")
        print(f"- Fiber: {daily_needs.fiber}g")
        print()

def test_food_recommendation():
    """Test t·∫°o khuy·∫øn ngh·ªã v·ªÅ m√≥n ƒÉn"""
    print("=== Test t·∫°o khuy·∫øn ngh·ªã m√≥n ƒÉn ===")
    
    # T·∫°o user profile m·∫´u
    user_profile = UserProfile(
        height=170,
        weight=65,
        age=25,
        gender=Gender.MALE,
        activity_level=ActivityLevel.MODERATELY_ACTIVE,
        goal=Goal.LOSE_WEIGHT
    )
    
    # T·∫°o th√¥ng tin dinh d∆∞·ª°ng m√≥n ƒÉn m·∫´u (ph·ªü b√≤)
    from app.schemas import NutritionInfo
    
    pho_bo = NutritionInfo(
        name="Ph·ªü b√≤",
        calories=350,
        protein=25,
        carbs=45,
        fat=8,
        fiber=3,
        sodium=800,
        serving_size="1 t√¥ v·ª´a",
        ingredients=["b√°nh ph·ªü", "th·ªãt b√≤", "n∆∞·ªõc d√πng", "rau th∆°m"],
        vitamins={"B12": 2.5, "Iron": 3.2},
        minerals={"Iron": 3.2, "Zinc": 2.1},
        description="M√≥n ph·ªü truy·ªÅn th·ªëng Vi·ªát Nam"
    )
    
    # Ph√¢n t√≠ch v√† t·∫°o khuy·∫øn ngh·ªã
    body_metrics = nutrition_advisor.analyze_user_profile(user_profile)
    daily_needs = nutrition_advisor.calculate_daily_nutrition_needs(
        body_metrics.daily_calories_target, 
        user_profile.goal
    )
    
    comparison = nutrition_advisor.analyze_food_nutrition(pho_bo, daily_needs)
    recommendation = nutrition_advisor.generate_food_recommendation(
        pho_bo, daily_needs, user_profile, comparison
    )
    
    print(f"Ph√¢n t√≠ch m√≥n ƒÉn: {pho_bo.name}")
    print(f"- Calories: {pho_bo.calories} ({comparison['calories']['percentage']:.1f}% nhu c·∫ßu)")
    print(f"- Protein: {pho_bo.protein}g ({comparison['protein']['percentage']:.1f}% nhu c·∫ßu)")
    print(f"- Carbs: {pho_bo.carbs}g ({comparison['carbs']['percentage']:.1f}% nhu c·∫ßu)")
    print(f"- Fat: {pho_bo.fat}g ({comparison['fat']['percentage']:.1f}% nhu c·∫ßu)")
    print()
    
    print(f"Khuy·∫øn ngh·ªã:")
    print(f"- C√≥ n√™n ƒÉn: {'C√≥' if recommendation.should_eat else 'Kh√¥ng'}")
    print(f"- ƒêi·ªÉm tin c·∫≠y: {recommendation.confidence_score:.2f}")
    print(f"- L√Ω do: {recommendation.reason}")
    print(f"- Khuy·∫øn ngh·ªã kh·∫©u ph·∫ßn: {recommendation.portion_recommendation}")
    
    if recommendation.warnings:
        print(f"- C·∫£nh b√°o:")
        for warning in recommendation.warnings:
            print(f"  + {warning}")
    
    if recommendation.suggestions:
        print(f"- G·ª£i √Ω:")
        for suggestion in recommendation.suggestions:
            print(f"  + {suggestion}")
    
    print(f"- T√°c ƒë·ªông h√†ng ng√†y:")
    for nutrient, percentage in recommendation.daily_impact.items():
        print(f"  + {nutrient}: {percentage}%")

def test_complete_analysis():
    """Test ph√¢n t√≠ch ho√†n ch·ªânh"""
    print("\n=== Test ph√¢n t√≠ch ho√†n ch·ªânh ===")
    
    user_profile = UserProfile(
        height=170,
        weight=65,
        age=25,
        gender=Gender.MALE,
        activity_level=ActivityLevel.MODERATELY_ACTIVE,
        goal=Goal.LOSE_WEIGHT
    )
    
    pho_bo = NutritionInfo(
        name="Ph·ªü b√≤",
        calories=350,
        protein=25,
        carbs=45,
        fat=8,
        fiber=3,
        sodium=800,
        serving_size="1 t√¥ v·ª´a",
        ingredients=["b√°nh ph·ªü", "th·ªãt b√≤", "n∆∞·ªõc d√πng", "rau th∆°m"],
        vitamins={"B12": 2.5, "Iron": 3.2},
        minerals={"Iron": 3.2, "Zinc": 2.1},
        description="M√≥n ph·ªü truy·ªÅn th·ªëng Vi·ªát Nam"
    )
    
    complete_analysis = nutrition_advisor.get_complete_analysis(user_profile, pho_bo)
    
    print(f"Ph√¢n t√≠ch ho√†n ch·ªânh cho {complete_analysis.food_recommendation.food_name}")
    print(f"- BMI: {complete_analysis.body_metrics.bmi} ({complete_analysis.body_metrics.bmi_category})")
    print(f"- BMR: {complete_analysis.body_metrics.bmr} calories/ng√†y")
    print(f"- TDEE: {complete_analysis.body_metrics.tdee} calories/ng√†y")
    print(f"- M·ª•c ti√™u calo: {complete_analysis.body_metrics.daily_calories_target} calories/ng√†y")
    print()
    
    print(f"Nhu c·∫ßu dinh d∆∞·ª°ng h√†ng ng√†y:")
    print(f"- Calories: {complete_analysis.daily_needs.calories}")
    print(f"- Protein: {complete_analysis.daily_needs.protein}g")
    print(f"- Carbs: {complete_analysis.daily_needs.carbs}g")
    print(f"- Fat: {complete_analysis.daily_needs.fat}g")
    print(f"- Fiber: {complete_analysis.daily_needs.fiber}g")
    print()
    
    print(f"Khuy·∫øn ngh·ªã cu·ªëi c√πng:")
    print(f"- {complete_analysis.food_recommendation.reason}")
    print(f"- ƒêi·ªÉm tin c·∫≠y: {complete_analysis.food_recommendation.confidence_score:.2f}")

if __name__ == "__main__":
    print("üöÄ B·∫Øt ƒë·∫ßu test Nutrition Advisor...\n")
    
    try:
        test_bmi_calculation()
        test_bmr_tdee_calculation()
        test_daily_nutrition_needs()
        test_food_recommendation()
        test_complete_analysis()
        
        print("\n‚úÖ T·∫•t c·∫£ test ƒë·ªÅu th√†nh c√¥ng!")
        
    except Exception as e:
        print(f"\n‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}")
        import traceback
        traceback.print_exc()
